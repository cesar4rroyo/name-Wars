{"version":3,"sources":["components/Header.tsx","components/mediaQueries.tsx","components/StyleComponents.tsx","components/Loader.tsx","components/ShowName.tsx","components/Hero.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavBar","styled","nav","Header","props","src","alt","height","size","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","Container","div","Button","button","FormDates","form","FormGender","Row","ContainerShowName","TextArea","h3","ImgArea","Loader","className","Col","Hero","name","loading","gender","getInfo","randon","Math","floor","random","setState","id","dividirNombre","cadena","separador","split","findName","a","urlId","state","axios","get","then","res","data","console","log","includes","nameSplit","nameProps","warsName","genderProps","errorMessage","alert","handleSubmit","e","preventDefault","handleChange","currentTarget","value","handleChangeGender","this","onSubmit","type","onChange","htmlFor","checked","ShowName","Component","App","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5486574f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface Props {\r\n    title: String;\r\n}\r\nconst NavBar = styled.nav`\r\n    height: 100px;\r\n    text-align: center;\r\n`;\r\n\r\nconst Header: React.FC<Props> = (props) => {\r\n    return (\r\n        <NavBar>\r\n            <img src=\"logo.svg.png\" alt=\"logoNav\" height=\"100px\" />\r\n        </NavBar>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst size = {\r\n    mobileS: \"320px\",\r\n    mobileM: \"375px\",\r\n    mobileL: \"425px\",\r\n    tablet: \"768px\",\r\n    laptop: \"1024px\",\r\n    laptopL: \"1440px\",\r\n    desktop: \"2560px\",\r\n};\r\n\r\nexport const device = {\r\n    mobileS: `(min-width: ${size.mobileS})`,\r\n    mobileM: `(min-width: ${size.mobileM})`,\r\n    mobileL: `(min-width: ${size.mobileL})`,\r\n    tablet: `(min-width: ${size.tablet})`,\r\n    laptop: `(min-width: ${size.laptop})`,\r\n    laptopL: `(min-width: ${size.laptopL})`,\r\n    desktop: `(min-width: ${size.desktop})`,\r\n    desktopL: `(min-width: ${size.desktop})`,\r\n};\r\n","import styled from \"styled-components\";\r\nimport { device } from \"./mediaQueries\";\r\n\r\nexport const Container = styled.div`\r\n    max-width: 800px;\r\n    text-align: justify;\r\n    padding: 2rem;\r\n    @media ${device.laptop} {\r\n        margin-left: auto;\r\n        margin-right: auto;\r\n    }\r\n    /* max-width: 800px; */\r\n`;\r\nexport const Button = styled.button`\r\n    border: 2px solid #d4c213;\r\n    text-transform: uppercase;\r\n    padding: 8px;\r\n    border-radius: 20px;\r\n    box-shadow: rgba(212, 194, 19, 0.6);\r\n    background-color: black;\r\n    color: white;\r\n    outline: none;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background-color: #d4c213;\r\n        color: black;\r\n        font-weight: bold;\r\n    }\r\n`;\r\nexport const FormDates = styled.form`\r\n    display: block;\r\n    margin-top: 1rem;\r\n    text-align: center;\r\n    margin-bottom: 1rem;\r\n    input {\r\n        padding: 1rem;\r\n        background-color: transparent;\r\n        border: 0;\r\n        margin-bottom: 1rem;\r\n        border-bottom: 2px solid #d4c213;\r\n        outline: none;\r\n        padding-left: 8px;\r\n        padding-bottom: 4px;\r\n        border-radius: 20px;\r\n        color: white;\r\n        font-weight: bold;\r\n        text-align: center;\r\n        font-size: 19px;\r\n    }\r\n    h3 {\r\n    }\r\n`;\r\nexport const FormGender = styled.div`\r\n    display: block;\r\n    input {\r\n        margin: 1rem;\r\n    }\r\n`;\r\nexport const DivContainer = styled.div`\r\n    text-align: center;\r\n`;\r\nexport const Row = styled.div`\r\n    display: flex;\r\n`;\r\n\r\nexport const ContainerShowName = styled.div`\r\n    max-width: 800px;\r\n    @media ${device.laptop} {\r\n        margin-left: auto;\r\n        margin-right: auto;\r\n    }\r\n    position: relative;\r\n    margin: 0 1rem 1rem 1rem;\r\n    padding: 1rem;\r\n    border: 2px solid #d4c213;\r\n    min-height: 100px;\r\n`;\r\nexport const TextArea = styled.h3`\r\n    text-align: center;\r\n    position: absolute;\r\n    top: 40%;\r\n    vertical-align: middle;\r\n    width: 50%;\r\n    font-size: 16px;\r\n`;\r\nexport const ImgArea = styled.div`\r\n    text-align: center;\r\n    img {\r\n        padding-left: 2rem;\r\n        width: 50%;\r\n    }\r\n`;\r\n","import React from \"react\";\r\n\r\nconst Loader: React.FC = () => {\r\n    return (\r\n        <div className=\"lds-ripple\">\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Loader from \"./Loader\";\r\nimport { ContainerShowName, Row, ImgArea, TextArea } from \"./StyleComponents\";\r\n\r\nconst Col = styled.div`\r\n    flex: ${(props: Props) => props.size};\r\n`;\r\ninterface Props {\r\n    size?: number;\r\n}\r\ntype MyProps = {\r\n    name?: string;\r\n    gender?: string;\r\n    loading: boolean;\r\n};\r\nconst Hero: React.FC<MyProps> = (props: MyProps) => {\r\n    const returnImg = () => {\r\n        if (props.gender === \"male\") {\r\n            return <img src=\"man.png\" alt=\"manImg\" />;\r\n        } else if (props.gender === \"female\") {\r\n            return <img src=\"women.png\" alt=\"womanImg\" />;\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n    const returnMessage = () => {\r\n        if (props.name === \"\") {\r\n            return <TextArea>Here you will see your name</TextArea>;\r\n        } else {\r\n            return <TextArea>Your Name will be like: {props.name}</TextArea>;\r\n        }\r\n    };\r\n    const showLoader = () => {\r\n        if (props.loading) {\r\n            return <Loader />;\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n    return (\r\n        <ContainerShowName>\r\n            <Row>\r\n                <Col size={1}>{returnMessage()}</Col>\r\n                <Col size={2}>\r\n                    <ImgArea>\r\n                        {showLoader()}\r\n                        {returnImg()}\r\n                    </ImgArea>\r\n                </Col>\r\n            </Row>\r\n        </ContainerShowName>\r\n    );\r\n};\r\n\r\nexport default Hero;\r\n","import React, { Component } from \"react\";\r\nimport { Button, Container, FormDates, FormGender } from \"./StyleComponents\";\r\nimport ShowName from \"./ShowName\";\r\nimport axios from \"axios\";\r\n\r\ntype MyProps = {\r\n    isChecked?: boolean;\r\n};\r\ntype MyState = {\r\n    gender: string;\r\n    name: string;\r\n    id?: number;\r\n    urlId?: number;\r\n    nameProps?: string;\r\n    genderProps?: string;\r\n    loading: boolean;\r\n};\r\nclass Hero extends Component<MyProps, MyState> {\r\n    constructor(props: MyProps) {\r\n        super(props);\r\n        this.state = {\r\n            gender: \"\",\r\n            name: \"\",\r\n            nameProps: \"\",\r\n            loading: false,\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.getInfo();\r\n    }\r\n\r\n    getInfo = () => {\r\n        let randon: number = Math.floor(Math.random() * 83 + 1);\r\n        this.setState({ id: randon });\r\n    };\r\n\r\n    dividirNombre = (cadena: string, separador: any) => {\r\n        var arrayCadena = cadena.split(separador);\r\n        return arrayCadena[1];\r\n    };\r\n\r\n    findName = async () => {\r\n        this.setState({ urlId: this.state.id });\r\n        await axios\r\n            .get(`https://swapi.dev/api/people/${this.state.id}`)\r\n            .then((res) => {\r\n                this.setState({ loading: false });\r\n                if (res.data.gender === this.state.gender) {\r\n                    console.log(res.data);\r\n                    if (res.data.name.includes(\" \")) {\r\n                        let nameSplit = this.dividirNombre(res.data.name, \" \");\r\n                        this.setState({ nameProps: nameSplit });\r\n                        let warsName: string =\r\n                            this.state.name + \" \" + this.state.nameProps;\r\n                        this.setState({ nameProps: warsName });\r\n                    } else {\r\n                        let warsName: string =\r\n                            this.state.name + \" \" + res.data.name;\r\n                        this.setState({ nameProps: warsName });\r\n                    }\r\n                    this.setState({ genderProps: this.state.gender });\r\n                    this.setState({ gender: \"\", name: \"\" });\r\n                    this.getInfo();\r\n                } else {\r\n                    while (this.state.id === this.state.urlId) {\r\n                        this.getInfo();\r\n                    }\r\n                    this.findName();\r\n                }\r\n            });\r\n    };\r\n\r\n    errorMessage = () => {\r\n        return alert(\"Complete all the fields!\");\r\n    };\r\n    handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        this.setState({ genderProps: \"\", nameProps: \"\" });\r\n        e.preventDefault();\r\n        if (this.state.gender === \"\" || this.state.name === \"\") {\r\n            this.errorMessage();\r\n        } else {\r\n            // console.log(this.state.name, this.state.gender);\r\n            this.setState({ loading: true });\r\n            this.findName();\r\n        }\r\n    };\r\n    handleChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({ name: e.currentTarget.value });\r\n    };\r\n    handleChangeGender = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({ gender: e.currentTarget.value });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <h2>\r\n                        Would you like to know what your last name would be if\r\n                        you belong to the Star Wars universe?\r\n                    </h2>\r\n                    <FormDates onSubmit={this.handleSubmit}>\r\n                        <h3>Type your first name: </h3>\r\n                        <input\r\n                            value={this.state.name}\r\n                            type=\"text\"\r\n                            onChange={this.handleChange}\r\n                        />\r\n                        <FormGender>\r\n                            <h3>Choose your gender: </h3>\r\n                            <label htmlFor=\"male\">Man</label>\r\n                            <input\r\n                                type=\"radio\"\r\n                                name=\"gender\"\r\n                                value=\"male\"\r\n                                checked={this.state.gender === \"male\"}\r\n                                onChange={this.handleChangeGender}\r\n                            />\r\n                            <label htmlFor=\"female\">Woman</label>\r\n                            <input\r\n                                type=\"radio\"\r\n                                name=\"gender\"\r\n                                value=\"female\"\r\n                                checked={this.state.gender === \"female\"}\r\n                                onChange={this.handleChangeGender}\r\n                            />\r\n                        </FormGender>\r\n                        <Button>Show my name</Button>\r\n                    </FormDates>\r\n                </Container>\r\n                <ShowName\r\n                    name={this.state.nameProps}\r\n                    gender={this.state.genderProps}\r\n                    loading={this.state.loading}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Hero;\r\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Hero from \"./components/Hero\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header title=\"Stars Names Wars\" />\n            <Hero />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}